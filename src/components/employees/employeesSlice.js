import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchEmployees } from './employeesAPI';

const initialState = {
  value: null,
  status: 'idle',
};

export const getEmployees = createAsyncThunk(
  'employees/fetchEmployees',
  async ({ name, positionId, page, size }) => {
    const response = await fetchEmployees(name, positionId, page, size);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const employeeSlice = createSlice({
  name: 'employees',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getEmployees.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getEmployees.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.employee.value)`
export const selectEmployees = (state) => state.employees.value;

export default employeeSlice.reducer;
