import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchEmployee, putEmployee } from './employeeAPI';

const initialState = {
  value: null,
  status: 'idle',
};

export const getEmployee = createAsyncThunk(
  'employee/fetchEmployee',
  async ({ payload }) => {
    const response = await fetchEmployee(payload);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getEmployeeKtp = createAsyncThunk(
  'employee/fetchEmployee',
  async ({ payload }) => {
    const response = await fetchEmployee(payload);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const editEmployee = createAsyncThunk(
  'employee/fetchEmployee',
  async ({ payload }) => {
    const response = await putEmployee(payload);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const employeeSlice = createSlice({
  name: 'employee',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setFirstName: (state, action) => {
      state.value.firstName = action.payload;
    },
    setLastName: (state, action) => {
      state.value.lastName = action.payload;
    },
    setDateOfBirth: (state, action) => {
      state.value.dateOfBirth = action.payload;
    },
    setPhoneNumber: (state, action) => {
      state.value.phoneNumber = action.payload;
    },
    setEmailAddress: (state, action) => {
      state.value.emailAddress = action.payload;
    },
    setProvince: (state, action) => {
      state.value.province = action.payload;
    },
    setCity: (state, action) => {
      state.value.city = action.payload;
    },
    setStreetAddress: (state, action) => {
      state.value.streetAddress = action.payload;
    },
    setZipCode: (state, action) => {
      state.value.zipCode = action.payload;
    },
    setKtpNumber: (state, action) => {
      state.value.ktpNumber = action.payload;
    },
    setKtpFile: (state, action) => {
      state.value.ktpFile = action.payload;
    },
    setPosition: (state, action) => {
      state.value.ktpNumber = action.payload;
    },
    setBankAccount: (state, action) => {
      state.value.bankAccount = action.payload;
    },
    setBankAccountNumber: (state, action) => {
      state.value.bankAccountNumber = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getEmployee.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getEmployee.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});

export const { 
  setFirstName,
  setLastName,
  setDateOfBirth,
  setPhoneNumber,
  setEmailAddress,
  setProvince,
  setCity,
  setStreetAddress,
  setZipCode,
  setKtpNumber,
  setKtpFile,
  setPosition,
  setBankAccount,
  setBankAccountNumber, 
} = employeeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.employee.value)`
export const selectEmployee = (state) => state.employee.value;

export default employeeSlice.reducer;
